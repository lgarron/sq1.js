<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 
<html><head> 
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"> 
<title>Square-1 scrambler</title> 
<script type="text/javascript" src="raphael-min.js"></script>
<script type="text/javascript" src="sq1.js"></script>
<script language="JavaScript1.1" type="text/javascript"> 
<!--
/* Javascript written by Jaap Scherphuis,  jaapsch a t yahoo d o t com */
var seqlen=40;
var numcub=5;
var colorString = "yobwrg";  //In dlburf order. May use any colours in colorList below
var seq=[];    // move sequences
var posit=[];    // piece array
var states=[];
 
function parse() {
    var s="";
    var urlquery=location.href.split("?")
    if(urlquery.length>1){
        var urlterms=urlquery[1].split("&")
        for( var i=0; i<urlterms.length; i++){
            var urllr=urlterms[i].split("=");
            if(urllr[0]=="len") {
                if(urllr[1]-0 >= 1 ) seqlen=urllr[1]-0;
            } else if(urllr[0]=="num"){
                if(urllr[1]-0 >= 1 ) numcub=urllr[1]-0;
            } else if(urllr[0]=="col") {
		if(urllr[1].length==6) colorString = urllr[1];
	    }
        }
    }
}
parse();


 
function colorGet(col) {
	if (col=="r") return ("#FF0000");
	if (col=="o") return ("#FF8000");
	if (col=="b") return ("#0000FF");
	if (col=="g") return ("#00FF00");
	if (col=="y") return ("#FFFF00");
	if (col=="w") return ("#FFFFFF");
}

//mathy helper functions
var radius, angles, angles2;
function cos1(index) {return Math.cos(angles[index])*radius;}
function sin1(index) {return Math.sin(angles[index])*radius;}
function cos2(index) {return Math.cos(angles2[index])*radius;}
function sin2(index) {return Math.sin(angles2[index])*radius;}

function drawPolygon(r, fillColor, arrx, arry) {

	var pathString = "M" + arrx[0] + "," + arry[0];

	for (var i = 1; i < arrx.length; i++) {
		pathString += "L" + arrx[i] + "," + arry[i];
	}

	pathString += "z";

	r.path(pathString).attr({fill: colorGet(fillColor), stroke: "#000"})
}
 
function drawSq(stickers, shapes, canvas) {
	var z = 1.366 // sqrt(2) / sqrt(1^2 + tan(15 degrees)^2)
	var r = Raphael(canvas, 200, 100);
	
	var arrx, arry;
 
	var margin = 1;
	var sidewid=.15*100/z;
	var centerx = 50;
	var centery = 50;
	radius=(centerx-margin-sidewid*z)/z;
	var w = (sidewid+radius)/radius		// ratio btw total piece width and radius
 
	angles=[0,0,0,0,0,0,0,0,0,0,0,0,0];
	angles2=[0,0,0,0,0,0,0,0,0,0,0,0,0];
 
	//initialize angles
	for(foo=0; foo<24; foo++){
		angles[foo]=(17-foo*2)/12*Math.PI;
		shapes = shapes.concat("xxxxxxxxxxxxxxxx");
	}
	for(foo=0; foo<24; foo++){
		angles2[foo]=(19-foo*2)/12*Math.PI;
		shapes = shapes.concat("xxxxxxxxxxxxxxxx");
	}
 
	//fill and outline first layer
	var shapecounter = 0;
	for(foo=0; shapecounter<12; foo++){
		if (shapes.length<=foo) shapecounter = 12;
		if (shapes.charAt(foo)=="x") shapecounter++;
		if (shapes.charAt(foo)=="c"){
			arrx=[centerx, centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+2)];
			arry=[centery, centery-sin1(shapecounter), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+2)];
			drawPolygon(r, stickers.charAt(foo), arrx, arry)
	
			arrx=[centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+1)*w*z, centerx+cos1(shapecounter)*w];
			arry=[centery-sin1(shapecounter), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+1)*w*z, centery-sin1(shapecounter)*w];
			drawPolygon(r, stickers.charAt(16+shapecounter), arrx, arry)
		
			arrx=[centerx+cos1(shapecounter+2), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+1)*w*z, centerx+cos1(shapecounter+2)*w];
			arry=[centery-sin1(shapecounter+2), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+1)*w*z, centery-sin1(shapecounter+2)*w];
			drawPolygon(r, stickers.charAt(17+shapecounter), arrx, arry)
 
			shapecounter +=2;
		}
		if (shapes.charAt(foo)=="e"){
			arrx=[centerx, centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)];
			arry=[centery, centery-sin1(shapecounter), centery-sin1(shapecounter+1)];
			drawPolygon(r, stickers.charAt(foo), arrx, arry)
	
			arrx=[centerx+cos1(shapecounter), centerx+cos1(shapecounter+1), centerx+cos1(shapecounter+1)*w, centerx+cos1(shapecounter)*w];
			arry=[centery-sin1(shapecounter), centery-sin1(shapecounter+1), centery-sin1(shapecounter+1)*w, centery-sin1(shapecounter)*w];
			drawPolygon(r, stickers.charAt(16+shapecounter), arrx, arry)
	
			shapecounter +=1;
		}
	}
 
	//fill and outline second layer
	centerx += 100;  
	shapecounter = 0;
	for(shapecounter=0; shapecounter<12; foo++){
		if (shapes.length<=foo) shapecounter = 12;
		if (shapes.charAt(foo)=="x") shapecounter++;
		if (shapes.charAt(foo)=="c"){
			arrx=[centerx, centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+2)];
			arry=[centery, centery-sin2(shapecounter), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+2)];
			drawPolygon(r, stickers.charAt(foo), arrx, arry)
 
			arrx=[centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+1)*w*z, centerx+cos2(shapecounter)*w];
			arry=[centery-sin2(shapecounter), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+1)*w*z, centery-sin2(shapecounter)*w];
			drawPolygon(r, stickers.charAt(28+shapecounter), arrx, arry)
	
			arrx=[centerx+cos2(shapecounter+2), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+1)*w*z, centerx+cos2(shapecounter+2)*w];
			arry=[centery-sin2(shapecounter+2), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+1)*w*z, centery-sin2(shapecounter+2)*w];
			drawPolygon(r, stickers.charAt(29+shapecounter), arrx, arry)

			shapecounter +=2;
 
		}
		if (shapes.charAt(foo)=="e"){
			arrx=[centerx, centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)];
			arry=[centery, centery-sin2(shapecounter), centery-sin2(shapecounter+1)];
			drawPolygon(r, stickers.charAt(foo), arrx, arry)
	
			arrx=[centerx+cos2(shapecounter), centerx+cos2(shapecounter+1), centerx+cos2(shapecounter+1)*w, centerx+cos2(shapecounter)*w];
			arry=[centery-sin2(shapecounter), centery-sin2(shapecounter+1), centery-sin2(shapecounter+1)*w, centery-sin2(shapecounter)*w];
			drawPolygon(r, stickers.charAt(28+shapecounter), arrx, arry)
 
		 	shapecounter +=1;
		}
	}
 
}
//-->
</script> 
</head> 
<body bgcolor="white"> 

 
<form name="frm"> 
<table border=1 cellpadding=0 cellspacing=0 width="100%" id="tbl"> 
<tr> 
 
<td colspan=2 bgcolor='#00c0c0'> 
    <table width="100%"> 
    <tr> 
        <td><font face="Arial" size=3>Number of scrambles:</font><input name=num size=4 maxlength=2></td> 
        <td><font face="Arial" size=3>Scramble length:</font><input name=len size=4 maxlength=3></td> 
	<td><font face='Arial' size=3>Colours (DLBURF):</font><input name=col size=6 maxlength=6></td> 
    <td><input type="submit" value="Scramble!"></td> 
    </tr> 
    </table> 
</td> 
</tr> 

</table></form>

<div id="status" style="padding: 1em;">
<button onclick="useAlerts = true; alert('Using alerts. There will be 14 alerts after you press \'Go!\', in addition to one per scramble.');">Use Alerts</button> <button onclick="runIt();">Go!</button> (This will take a few seconds, possibly a few minutes if your computer is slow. Pull up the Javascript console in your browser before pressing this, if you know how.)
</div>

 
<script language="JavaScript1.1" type="text/javascript">

var useAlerts = false; 

function runIt() {
<!--
document.frm.len.value=seqlen;
document.frm.num.value=numcub;
document.frm.col.value=colorString;
 
 
function remove_duplicates(arr)
{
	var out = [];
	var j=0;
	for (var i=0; i<arr.length; i++)
	{
		if(i==0 || arr[i]!=arr[i-1])
		out[j++] = arr[i];
	}
	return out;
}
 
var tb = ["3","3","3","3","0","0","0","0","3","3","3","3","0","0","0","0"];
var ty = ["c","c","c","c","c","c","c","c","e","e","e","e","e","e","e","e"];
//var col = ["rb","b","bo","o","og","g","gr","r","r","rg","g","go","o","ob","b","br"];
var col = ["12","24","45","51","21","42","54","15","2","4","5","1","2","4","5","1"]

sq = new Square1Solver();

function cb(str) {
	if (useAlerts) {
		alert(str);
	}
	else {
		document.getElementById("status").innerHTML += "<br>Status: " + str;
	}
}

sq.initialize(cb);

for(var i=0; i<numcub; i++){

	cb("Generating scramble #" + (i+1) + ".");

	state = sq.getRandomState();
	posit2 = state.permutation;

	scrambleString = sq.generate(state).join("");

	// // (4, -3)/(-1, 2)/(0, -3)/(4, 1)/(-1, 2)/(-2, 1)/(-1, 2)/(0, 4)/(-3, 0)/(-2, 5)/(0, 2)/(0, -2)/(0, 4)
	// posit2 = [7, 15, 1, 8, 5, 14, 9, 4, 3, 10, 11, 12, 0, 2, 6, 13]
	// posit2 = [7, 7, 15, 1, 1, 8, 5, 5, 14, 9, 4, 4, 3, 10, 11, 12, 0, 0, 2, 2, 6, 6, 13, 3]
	// posit2 = [0, 8, 1, 1, 9, 2, 2, 10, 3, 3, 11, 0, 4, 12, 5, 5, 13, 6, 6, 14, 7, 7, 15, 4];
	// //(1, 0)/(-1, 5)/(4, 1)/(3, 0)/(-3, 0)/(2, -1)/(1, -2)/(0, -3)/(-1, 3)/(-3, 0)/(0, -1)/(-4, 0)/(4, 0)
	// posit2 = [4, 4, 3, 3, 6, 6, 5, 5, 9, 2, 2, 10, 1, 1, 11, 13, 7, 7, 12, 15, 8, 0, 0, 14];



	var posit = new Array();
	map = [8,9,10, 11,0,1, 2,3,4, 5,6,7, 13,12,23, 22,21,20, 19,18,17, 16,15,14];
	for (j in map) {
		posit.push(posit2[map[j]]);
	}

	var top_side=remove_duplicates(posit.slice(0,12));
	var bot_side=remove_duplicates(posit.slice(12,24));
	var eido=top_side.concat(bot_side);

	//console.log(eido)

	var ff = posit.slice(0,2);
	//posit = posit.slice(0,8).concat(ff);
	a="";
	b="";
	c="";
	eq="_";
	for(var j=0; j<16; j++)
	{
		a+=ty[eido[j]];
		eq=eido[j];
		b+=tb[eido[j]];
		c+=col[eido[j]];
	}
	
	var stickers = (b.concat(c)).replace(/0/g,colorString[0]).replace(/1/g,colorString[1]).replace(/2/g,colorString[2]).replace(/3/g,colorString[3]).replace(/4/g,colorString[4]).replace(/5/g,colorString[5]);
	var url="<script type='text/javascript'><\/script>";
	var table = document.getElementById("tbl");
	table.innerHTML += ( "<tr><td><font face='Arial' size=3><b>&nbsp;&nbsp;" + i + ". " + scrambleString + "<\/b><\/font><\/td><td>"
		+ "<div style='position:relative;height:100px;width:200px;text' id='scramble" + i + "'>" + url + "<\/td><\/tr>");
	drawSq(stickers, a, "scramble" + i);
}
};
//-->
</script> 
<font face='Arial' size=2>version: November 16, 2011</font> 
</body> 
</html> 