<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 
<html><head> 
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1"> 
<title>Square-1 scrambler</title> 
<script type="text/javascript" src="raphael-min.js"></script>
<script type="text/javascript" src="sq1.js"></script>
<script type="text/javascript" src="mersennetwister.js"></script>
<script language="JavaScript1.1" type="text/javascript"> 

/* This scrambler builds on the work of Jaap Scherphuis, Andrew Nelson, Michael Gottlieb, Waltter Souza, and Lucas Garron. Some parts of it haven't cleaned up in a while, but it works. */

var seed1 = new Date().getTime() + (Math.random()*0xffffffff);
var seed2 = new Date().getTime() + (Math.random()*0xffffffff);
var seed3 = new Date().getTime() + (Math.random()*0xffffffff);
var seed4 = new Date().getTime() + (Math.random()*0xffffffff);
// Make sure that the seed calculation is not deterministic due to implementation details (this happened with a straight adoption of QBX code, due to attempted bit masking of a float). We do this a few times to reduce the chances of a false negative.
if (seed1 != seed2 || seed1 != seed3 || seed1 != seed4) {
	console.log("Seeding Mersenne Twister.");
	var mt = new MersenneTwisterObject(seed1);
	setRandomSource(mt);
}
else {
	console.log("WARNING: Unable to generate a unique seed for Mersenne Twister. Falling back to Math.random().");
}

// Legacy argument parsing, which still works.

var seqlen=40;
var numcub=5;
var scrambleStyle = "mrss";
var colorString = "yobwrg";  //In dlburf order. May use any colours in colorList below
var seq=[];    // move sequences
var posit=[];    // piece array
var states=[];
 
function parse() {
    var s="";
    var urlquery=location.href.split("?")
    if(urlquery.length>1){
        var urlterms=urlquery[1].split("&")
        for( var i=0; i<urlterms.length; i++){
            var urllr=urlterms[i].split("=");
            if(urllr[0]=="len") {
                if(urllr[1]-0 >= 1 ) seqlen=urllr[1]-0;
            } else if(urllr[0]=="num"){
                if(urllr[1]-0 >= 1 ) numcub=urllr[1]-0;
            } else if(urllr[0]=="style"){
                if(urllr[1]=="mrss" || urllr[1]=="old" ) scrambleStyle=urllr[1];
            } else if(urllr[0]=="col") {
		if(urllr[1].length==6) colorString = urllr[1];
	    }
        }
    }
}
parse();

// Old drawing code (adapted to raphael.js). Also still works.
 
function colorGet(col) {
	if (col=="r") return ("#FF0000");
	if (col=="o") return ("#FF8000");
	if (col=="b") return ("#0000FF");
	if (col=="g") return ("#00FF00");
	if (col=="y") return ("#FFFF00");
	if (col=="w") return ("#FFFFFF");
	if (col=="x") return ("#000000");
}

//mathy helper functions
var radius, angles, angles2;
function cos1(index) {return Math.cos(angles[index])*radius;}
function sin1(index) {return Math.sin(angles[index])*radius;}
function cos2(index) {return Math.cos(angles2[index])*radius;}
function sin2(index) {return Math.sin(angles2[index])*radius;}

function drawPolygon(r, fillColor, arrx, arry) {

	var pathString = "M" + arrx[0] + "," + arry[0];

	for (var i = 1; i < arrx.length; i++) {
		pathString += "L" + arrx[i] + "," + arry[i];
	}

	pathString += "z";

	r.path(pathString).attr({fill: colorGet(fillColor), stroke: "#000"})
}
 
function drawSq(stickers, middleIsSolved, shapes, canvas) {
	var z = 1.366 // sqrt(2) / sqrt(1^2 + tan(15 degrees)^2)
	var r = Raphael(canvas, 200, 110);
	
	var arrx, arry;
 
	var margin = 1;
	var sidewid=.15*100/z;
	var centerx = 50;
	var centery = 50;
	radius=(centerx-margin-sidewid*z)/z;
	var w = (sidewid+radius)/radius		// ratio btw total piece width and radius
 
	angles=[0,0,0,0,0,0,0,0,0,0,0,0,0];
	angles2=[0,0,0,0,0,0,0,0,0,0,0,0,0];
 
	//initialize angles
	for(foo=0; foo<24; foo++){
		angles[foo]=(17-foo*2)/12*Math.PI;
		shapes = shapes.concat("xxxxxxxxxxxxxxxx");
	}
	for(foo=0; foo<24; foo++){
		angles2[foo]=(19-foo*2)/12*Math.PI;
		shapes = shapes.concat("xxxxxxxxxxxxxxxx");
	}
	
	var h = sin1(1)*w*z - sin1(1)*z;
	if (middleIsSolved) {
		arrx=[centerx+cos1(1)*w*z, centerx+cos1(4)*w*z, centerx+cos1(7)*w*z, centerx+cos1(10)*w*z];
		arry=[centery-sin1(1)*w*z, centery-sin1(4)*w*z, centery-sin1(7)*w*z, centery-sin1(10)*w*z];
		drawPolygon(r, "x", arrx, arry);
		
		centery += 10;
		arrx=[centerx+cos1(0)*w, centerx+cos1(0)*w, centerx+cos1(1)*w*z, centerx+cos1(1)*w*z];
		arry=[centery-sin1(1)*w*z, centery-sin1(1)*z, centery-sin1(1)*z, centery-sin1(1)*w*z, centery-sin1(1)*w*z];
		drawPolygon(r, colorString[5], arrx, arry)

		arrx=[centerx+cos1(0)*w, centerx+cos1(0)*w, centerx+cos1(10)*w*z, centerx+cos1(10)*w*z];
		arry=[centery-sin1(1)*w*z, centery-sin1(1)*z, centery-sin1(1)*z, centery-sin1(1)*w*z, centery-sin1(1)*w*z];
		drawPolygon(r, colorString[5], arrx, arry)
		centery -= 10;
	}
	else {
		arrx=[centerx+cos1(1)*w*z, centerx+cos1(4)*w*z, centerx+cos1(6)*w, centerx+cos1(9)*w*z, centerx+cos1(11)*w*z, centerx+cos1(0)*w];
		arry=[centery-sin1(1)*w*z, centery-sin1(4)*w*z, centery-sin1(6)*w, centery+sin1(9)*w*z, centery-sin1(11)*w*z, centery-sin1(0)*w];
		drawPolygon(r, "x", arrx, arry);

		arrx=[centerx+cos1(9)*w*z, centerx+cos1(11)*w*z, centerx+cos1(11)*w*z, centerx+cos1(9)*w*z];
		arry=[centery+sin1(9)*w*z-h, centery-sin1(11)*w*z-h, centery-sin1(11)*w*z, centery+sin1(9)*w*z];
		drawPolygon(r, colorString[4], arrx, arry);

		centery += 10;
		arrx=[centerx+cos1(0)*w, centerx+cos1(0)*w, centerx+cos1(1)*w*z, centerx+cos1(1)*w*z];
		arry=[centery-sin1(1)*w*z, centery-sin1(1)*z, centery-sin1(1)*z, centery-sin1(1)*w*z];
		drawPolygon(r, colorString[5], arrx, arry)

		arrx=[centerx+cos1(0)*w, centerx+cos1(0)*w, centerx+cos1(11)*w*z, centerx+cos1(11)*w*z];
		arry=[centery-sin1(1)*w*z, centery-sin1(1)*z, centery-sin1(11)*w*z + h, centery-sin1(11)*w*z];
		drawPolygon(r, colorString[2], arrx, arry)
		centery -= 10;
	}
	 
	//fill and outline first layer
	var shapecounter = 0;
	for(foo=0; shapecounter<12; foo++){
		if (shapes.length<=foo) shapecounter = 12;
		if (shapes.charAt(foo)=="x") shapecounter++;
		if (shapes.charAt(foo)=="c"){
			arrx=[centerx, centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+2)];
			arry=[centery, centery-sin1(shapecounter), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+2)];
			drawPolygon(r, stickers.charAt(foo), arrx, arry)
	
			arrx=[centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+1)*w*z, centerx+cos1(shapecounter)*w];
			arry=[centery-sin1(shapecounter), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+1)*w*z, centery-sin1(shapecounter)*w];
			drawPolygon(r, stickers.charAt(16+shapecounter), arrx, arry)
		
			arrx=[centerx+cos1(shapecounter+2), centerx+cos1(shapecounter+1)*z, centerx+cos1(shapecounter+1)*w*z, centerx+cos1(shapecounter+2)*w];
			arry=[centery-sin1(shapecounter+2), centery-sin1(shapecounter+1)*z, centery-sin1(shapecounter+1)*w*z, centery-sin1(shapecounter+2)*w];
			drawPolygon(r, stickers.charAt(17+shapecounter), arrx, arry)
 
			shapecounter +=2;
		}
		if (shapes.charAt(foo)=="e"){
			arrx=[centerx, centerx+cos1(shapecounter), centerx+cos1(shapecounter+1)];
			arry=[centery, centery-sin1(shapecounter), centery-sin1(shapecounter+1)];
			drawPolygon(r, stickers.charAt(foo), arrx, arry)
	
			arrx=[centerx+cos1(shapecounter), centerx+cos1(shapecounter+1), centerx+cos1(shapecounter+1)*w, centerx+cos1(shapecounter)*w];
			arry=[centery-sin1(shapecounter), centery-sin1(shapecounter+1), centery-sin1(shapecounter+1)*w, centery-sin1(shapecounter)*w];
			drawPolygon(r, stickers.charAt(16+shapecounter), arrx, arry)
	
			shapecounter +=1;
		}
	}
 
	//fill and outline second layer
	centerx += 100;  
	centery += 10;


	var h = sin1(1)*w*z - sin1(1)*z;
	if (middleIsSolved) {
		arrx=[centerx+cos1(1)*w*z, centerx+cos1(4)*w*z, centerx+cos1(7)*w*z, centerx+cos1(10)*w*z];
		arry=[centery+sin1(1)*w*z, centery+sin1(4)*w*z, centery+sin1(7)*w*z, centery+sin1(10)*w*z];
		drawPolygon(r, "x", arrx, arry);
		
		centery -= 10;
		arrx=[centerx+cos1(0)*w, centerx+cos1(0)*w, centerx+cos1(1)*w*z, centerx+cos1(1)*w*z];
		arry=[centery+sin1(1)*w*z, centery+sin1(1)*z, centery+sin1(1)*z, centery+sin1(1)*w*z, centery+sin1(1)*w*z];
		drawPolygon(r, colorString[5], arrx, arry)

		arrx=[centerx+cos1(0)*w, centerx+cos1(0)*w, centerx+cos1(10)*w*z, centerx+cos1(10)*w*z];
		arry=[centery+sin1(1)*w*z, centery+sin1(1)*z, centery+sin1(1)*z, centery+sin1(1)*w*z, centery+sin1(1)*w*z];
		drawPolygon(r, colorString[5], arrx, arry)
		centery += 10;
	}
	else {
		arrx=[centerx+cos1(1)*w*z, centerx+cos1(4)*w*z, centerx+cos1(6)*w, centerx+cos1(9)*w*z, centerx+cos1(11)*w*z, centerx+cos1(0)*w];
		arry=[centery+sin1(1)*w*z, centery+sin1(4)*w*z, centery+sin1(6)*w, centery-sin1(9)*w*z, centery+sin1(11)*w*z, centery+sin1(0)*w];
		drawPolygon(r, "x", arrx, arry);

		arrx=[centerx+cos1(9)*w*z, centerx+cos1(11)*w*z, centerx+cos1(11)*w*z, centerx+cos1(9)*w*z];
		arry=[centery-sin1(9)*w*z+h, centery+sin1(11)*w*z+h, centery+sin1(11)*w*z, centery-sin1(9)*w*z];
		drawPolygon(r, colorString[4], arrx, arry);

		centery -= 10;
		arrx=[centerx+cos1(0)*w, centerx+cos1(0)*w, centerx+cos1(1)*w*z, centerx+cos1(1)*w*z];
		arry=[centery+sin1(1)*w*z, centery+sin1(1)*z, centery+sin1(1)*z, centery+sin1(1)*w*z];
		drawPolygon(r, colorString[5], arrx, arry)

		arrx=[centerx+cos1(0)*w, centerx+cos1(0)*w, centerx+cos1(11)*w*z, centerx+cos1(11)*w*z];
		arry=[centery+sin1(1)*w*z, centery+sin1(1)*z, centery+sin1(11)*w*z - h, centery+sin1(11)*w*z];
		drawPolygon(r, colorString[2], arrx, arry)
		centery += 10;
	}

	shapecounter = 0;
	for(shapecounter=0; shapecounter<12; foo++){
		if (shapes.length<=foo) shapecounter = 12;
		if (shapes.charAt(foo)=="x") shapecounter++;
		if (shapes.charAt(foo)=="c"){
			arrx=[centerx, centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+2)];
			arry=[centery, centery-sin2(shapecounter), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+2)];
			drawPolygon(r, stickers.charAt(foo), arrx, arry)
 
			arrx=[centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+1)*w*z, centerx+cos2(shapecounter)*w];
			arry=[centery-sin2(shapecounter), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+1)*w*z, centery-sin2(shapecounter)*w];
			drawPolygon(r, stickers.charAt(28+shapecounter), arrx, arry)
	
			arrx=[centerx+cos2(shapecounter+2), centerx+cos2(shapecounter+1)*z, centerx+cos2(shapecounter+1)*w*z, centerx+cos2(shapecounter+2)*w];
			arry=[centery-sin2(shapecounter+2), centery-sin2(shapecounter+1)*z, centery-sin2(shapecounter+1)*w*z, centery-sin2(shapecounter+2)*w];
			drawPolygon(r, stickers.charAt(29+shapecounter), arrx, arry)

			shapecounter +=2;
 
		}
		if (shapes.charAt(foo)=="e"){
			arrx=[centerx, centerx+cos2(shapecounter), centerx+cos2(shapecounter+1)];
			arry=[centery, centery-sin2(shapecounter), centery-sin2(shapecounter+1)];
			drawPolygon(r, stickers.charAt(foo), arrx, arry)
	
			arrx=[centerx+cos2(shapecounter), centerx+cos2(shapecounter+1), centerx+cos2(shapecounter+1)*w, centerx+cos2(shapecounter)*w];
			arry=[centery-sin2(shapecounter), centery-sin2(shapecounter+1), centery-sin2(shapecounter+1)*w, centery-sin2(shapecounter)*w];
			drawPolygon(r, stickers.charAt(28+shapecounter), arrx, arry)
 
		 	shapecounter +=1;
		}
	}

 
}
</script> 
<style>
body {
	font-family: Helvetica, Tahoma, Arial;
}
h2 {
	text-align: center;
	margin: 0px;
}
li {
	padding: 0.2em;
}
</style>
</head> 
<body bgcolor="white" onload="document.getElementById('goButton').focus();"> 

<div id="status" style="padding: 1em; margin: 1em; font-family: Helvetica; border: 1px solid #888; border-radius: 1em; background: #CCC;">
<center>
	<h2>WCA Square-1 Scrambler (Markov Random-State)</h2><br>
	<button onclick="runIt();" id="goButton" style="font-size: 200%; padding: 0.1em 1em;">Scramble!</button>
</center>
<ul>
	<li>Initialization may be as fast as 2.5 seconds, depending on your browser.</li>
	<li>After initialization, each scramble normally takes a lot less than a second, but some of them may take up to a minute each.</li>
	<ul>
		<li>In order to ensure truly random scrambles: If a particular scramble is taking a while, try to be patient instead of retrying.</li>
	</ul>
	<li>As of November 2011, this scrambler runs fastest in Google Chrome. If you are having issues running this, consider trying it in Chrome.</li>
</ul>
</div>
 
<table border=1 cellpadding=0 cellspacing=0 width="100%" id="tbl"> 
<tr> 
 
<td colspan=2 bgcolor='#00c0c0'> 
    <table width="100%"> 
    <tr> 
    <td><button onclick="toggleStatus();">Toggle Progress Info</button></td> 
    <td><font face="Arial" size=3>Number of scrambles:</font><input id="num" size=4 maxlength=2 onchange="numcub=this.value"></td> 
	<td><font face='Arial' size=3>Colours (DLBURF):</font><input id="col" size=6 maxlength=6 onchange="colorString=this.value"></td> 
	<td>
		<font face='Arial' size=3>Style:</font>
		<select id="scramble_style" onchange="scrambleStyle = this.value;">
			<option value="mrss">MRSS</option>
			<option value="old">Old</option>
		</select>
	</td>
    <td><button onclick="runIt();">Scramble!</button></td> 
    </tr> 
    </table> 
</td> 
</tr> 
<tbody id="tbd">
</tbody>
</table>
<script>
 
function randomTurnScramble(){
    var i,j,ls,n,f;
    posit = [0,0,1,2,2,3,4,4,5,6,6,7,8,9,9,10,11,11,12,13,13,14,15,15];
    ls=-1;
    var seq=[];
    f=0;
    var middleIsSolved = true;
    for(i=0; i<seqlen; i++){
        do{
            if(ls==0){
                j=Math.floor(Math.random()*22)-11;
                if(j>=0) j++;
            }else if(ls==1){
                j=Math.floor(Math.random()*12)-11;
            }else if(ls==2){
                j=0;
            }else{
                j=Math.floor(Math.random()*23)-11;
            }
            // if past second twist, restrict bottom layer
        }while( (f>1 && j>=-6 && j<0) || domove(j) );
        if(j>0) ls=1;
        else if(j<0) ls=2;
        else { ls=0; f++; }
        if (j == 0) {
        	console.log("Twist.");
        	middleIsSolved = !middleIsSolved;
        }
        seq[i]=j;
    }
	return {"position": posit, "scrambleString": scramblestring(seq), "middleIsSolved": middleIsSolved};
}
 
function scramblestring(seq){
	console.log(seq);
    var s="",i,k,l=-1;
    for(i=0; i<seq.length; i++){
        k=seq[i];
        if(k==0){
            if(l==-1) s+="(0,0) / ";
            if(l==1) s+="0)  ";
            if(l==2) s+=") / ";
            l=0;
        }else if(k>0){
            s+= "(" + (k>6?k-12:k)+",&nbsp;";
            l=1;
        }else if(k<0){
            if(l<=0) s+="(0,";
            s+=(k<=-6?k+12:k);
            l=2;
        }
    }
    if(l==1) s+="0";
    if(l!=0) s+=")";
    return s;
}
 
 
function domove(m){
    var i,c,t,f=m;
    //do move f
    if( f==0 ){
        for(i=0; i<6; i++){
            c=posit[i+12];
            posit[i+12]=posit[i+6];
            posit[i+6]=c;
        }
    }else if(f>0){
        f=12-f;
        if( posit[f]==posit[f-1] ) return true;
        if( f<6 && posit[f+6]==posit[f+5] ) return true;
        if( f>6 && posit[f-6]==posit[f-7] ) return true;
        if( f==6 && posit[0]==posit[11] ) return true;
        t=[];
        for(i=0;i<12;i++) t[i]=posit[i];
        c=f;
        for(i=0;i<12;i++){
            posit[i]=t[c];
            if(c==11)c=0; else c++;
        }
    }else if(f<0){
        f=-f;
        if( posit[f+12]==posit[f+11] ) return true;
        if( f<6 && posit[f+18]==posit[f+17] ) return true;
        if( f>6 && posit[f+6]==posit[f+5] ) return true;
        if( f==6 && posit[12]==posit[23] ) return true;
        t=[];
        for(i=0;i<12;i++) t[i]=posit[i+12];
        c=f;
        for(i=0;i<12;i++){
            posit[i+12]=t[c];
            if(c==11)c=0; else c++;
        }
    }
    return false;
}
</script>
<script language="JavaScript1.1" type="text/javascript">

document.getElementById("num").value=numcub;
document.getElementById("col").value=colorString;
document.getElementById("scramble_style").value=scrambleStyle;

var useAlerts = false; 
 
function toggleStatus() {
	if (document.getElementById("status").style.display == "none") {
		document.getElementById("status").style.display = "block";
	}
	else {
		document.getElementById("status").style.display = "none";
	}
}
 
function remove_duplicates(arr)
{
	var out = [];
	var j=0;
	for (var i=0; i<arr.length; i++)
	{
		if(i==0 || arr[i]!=arr[i-1])
		out[j++] = arr[i];
	}
	return out;
}
 


var oldtb = ["3","3","3","3","3","3","3","3","0","0","0","0","0","0","0","0"];
var oldty = ["c","e","c","e","c","e","c","e","e","c","e","c","e","c","e","c"];
//var col = ["rb","b","bo","o","og","g","gr","r","r","rg","g","go","o","ob","b","br"];
var oldcol = ["51","1","12","2","24","4","45","5","5","54","4","42","2","21","1","15"];
 


function runIt() {

document.getElementById("dateGenerated").innerHTML = "Scrambles generated: " + new Date().toString();

document.getElementById("status").style.display = "block";
document.getElementById("status").innerHTML = "<h2 style=\"margin: 0px;\">Generating Square-1 Scrambles...</h2>";


document.getElementById("tbd").innerHTML = "";

var warning = "WARNING: These scrambles are just " + seqlen + " random turns. They are NOT random states.";
var style = "?";
if (scrambleStyle == "mrss") {
}
else if (scrambleStyle == "old") {
	document.getElementById("tbd").innerHTML += "<tr><td colspan=\"2\" style=\"text-align: center; color: #F00; padding: 1em;\">" + warning + "</td></tr>";
}


function cb(str) {
	if (useAlerts) {
		alert(str);
	}
	else {
		document.getElementById("status").innerHTML += "<br>" + str;
	}
}

function genScrambles() {
// From sq1.js
initializationStartTime = new Date().getTime();
initializationLastTime = initializationStartTime;
statusI = 0;

logStatus = function(statusString) {
    var initializationCurrentTime, outString;
    statusI++;
    initializationCurrentTime = new Date().getTime();
    outString = statusString + " [" + (initializationCurrentTime - initializationLastTime) + "ms split, " + (initializationCurrentTime - initializationStartTime) + "ms total]";
    initializationLastTime = initializationCurrentTime;
    console.log(outString);
    cb(outString);
  };

if (scrambleStyle == "mrss") {
	document.getElementById("status").innerHTML+= "<br><br>Using Markov Random-State scrambles.";
}
else if (scrambleStyle == "old") {
	document.getElementById("status").innerHTML+= "Using old scrambles.<br><br><div style=\"color: #f00;\">" + warning + "</div>";
}
logStatus("Generating " + numcub + " scrambles.");


function scrambleRecursive(i, n) {

	var posit;
	var middleIsSolved;
	var scrambleString;
	var tb, ty, col, eido;

	if (scrambleStyle == "mrss") {
		var position = square1SolverGetRandomPosition();
		var state = position["permutation"];
		middleIsSolved = position["middleIsSolved"];
		console.log(state);
		scrambleString = square1SolverGenerate(position).join("");
		
		posit = [];
		map = [8,9,10, 11,0,1, 2,3,4, 5,6,7, 19,18,17, 16,15,14, 13,12,23, 22,21,20];
		for (j in map) {
			posit.push(state[map[j]]);
		}
				
		tb = ["3","3","3","3","0","0","0","0","3","3","3","3","0","0","0","0"];
		ty = ["c","c","c","c","c","c","c","c","e","e","e","e","e","e","e","e"];
		col = ["12","24","45","51","21","42","54","15","2","4","5","1","2","4","5","1"];
 
		var top_side=remove_duplicates(posit.slice(0,12));
		var bot_side=remove_duplicates(posit.slice(18,24).concat(posit.slice(12,18)));
		eido=top_side.concat(bot_side);
	}
	else if (scrambleStyle == "old") {
		var scr = randomTurnScramble();
		var posit = scr["position"];
		middleIsSolved = scr["middleIsSolved"];

		scrambleString = scr["scrambleString"];

		tb = ["3","3","3","3","3","3","3","3","0","0","0","0","0","0","0","0"];
		ty = ["c","e","c","e","c","e","c","e","e","c","e","c","e","c","e","c"];
		col = ["51","1","12","2","24","4","45","5","5","54","4","42","2","21","1","15"];


		var top_side=remove_duplicates(posit.slice(0,12));
		var bot_side=remove_duplicates(posit.slice(12,24));
		eido=top_side.concat(bot_side);
	}
	else {
		alert("Impossible scramble style: " + scrambleStyle);
		return;
	}

	a="";
	b="";
	c="";
	eq="_";
	for(var j=0; j<16; j++)
	{
		a+=ty[eido[j]];
		eq=eido[j];
		b+=tb[eido[j]];
		c+=col[eido[j]];
	}
	
	var stickers = (b.concat(c)).replace(/0/g,colorString[0]).replace(/1/g,colorString[1]).replace(/2/g,colorString[2]).replace(/3/g,colorString[3]).replace(/4/g,colorString[4]).replace(/5/g,colorString[5]);
	var table = document.getElementById("tbd");
	table.innerHTML += ( "<tr><td><font face='Arial' size=3><b>&nbsp;&nbsp;" + i + ". " + scrambleString + "<\/b><\/font><\/td><td><center>"
		+ "<div style='position:relative;height:110px;width:200px;' id='scramble" + i + "'/></center><\/td><\/tr>");
	drawSq(stickers, middleIsSolved, a, "scramble" + i);

	logStatus("Generated scramble #" + (i) + ".");
	
	if (i < n) {
		setTimeout(function () {scrambleRecursive(i+1, n);}, 0);
	}
	else {
		setTimeout(function () {document.getElementById("status").style.display = "none";}, 1000);
	}
};
setTimeout(function () {scrambleRecursive(1, numcub);}, 0);
}

if (!square1SolverInitialized && scrambleStyle == "mrss") {
	square1SolverInitialize(true, genScrambles, cb);
}
else {
	genScrambles();
}

};
//-->
</script>
<div id="footer" style="margin: 0.5em; font-family: Helvetica;">
Scrambler version: November 16, 2011<br>
<div id="dateGenerated">
</div>
</div>
</body> 
</html> 